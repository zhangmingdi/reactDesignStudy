[{"D:\\reactstudy\\my-app\\src\\react.js":"1","D:\\reactstudy\\my-app\\src\\react-dom.js":"2","D:\\reactstudy\\my-app\\src\\index.js":"3","D:\\reactstudy\\my-app\\src\\reportWebVitals.js":"4"},{"size":1358,"mtime":1611065226649,"results":"5","hashOfConfig":"6"},{"size":3966,"mtime":1611153577041,"results":"7","hashOfConfig":"6"},{"size":2573,"mtime":1611153335309,"results":"8","hashOfConfig":"6"},{"size":362,"mtime":1609773026717,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},"a4f8ff",{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\reactstudy\\my-app\\src\\react.js",["20"],"import { updateComponent } from \"./react-dom\"\r\n\r\n\r\nfunction createElement(type, config = {}, ...childrens) {\r\n\r\n  return {\r\n    type,\r\n    props: {\r\n      ...config,\r\n      childrens\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport class Component {\r\n\r\n  static isComponent = true\r\n\r\n  constructor(props) {\r\n    this.props = props\r\n\r\n    // 更新队列\r\n    this._updateQueue = []\r\n\r\n    //回调队列\r\n    this._callbackQueue = []\r\n\r\n    // 表示是否处于批量更新状态\r\n    this._isBatchingUpdate = false\r\n\r\n  }\r\n\r\n  setState(partialState, calback) {\r\n    this._updateQueue.push(partialState)\r\n    if (calback) {\r\n      this._callbackQueue.push(calback)\r\n    }\r\n    if (!this._isBatchingUpdate) {\r\n      this.forceUpDate()\r\n    }\r\n  }\r\n\r\n\r\n\r\n  // 这个函数的作用是拿到最新的状态\r\n  forceUpDate() {\r\n\r\n    this.state = this._updateQueue.reduce((accumulate, current) => {\r\n\r\n      const nextState = typeof current == 'function' ? current(this.state) : current\r\n\r\n      //覆盖原来的状态\r\n      accumulate = { ...accumulate, ...nextState }\r\n\r\n      return accumulate\r\n\r\n    }, this.state)\r\n\r\n    this._updateQueue.length = 0\r\n\r\n    // 这个函数的作用是更新最新的jsDom对象\r\n    updateComponent(this)\r\n    this._callbackQueue.forEach(item => item())\r\n    this._callbackQueue.length = 0\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default { createElement }","D:\\reactstudy\\my-app\\src\\react-dom.js",["21"],"D:\\reactstudy\\my-app\\src\\index.js",["22"],"import React, { Component } from './react';\nimport ReactDOM from './react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// const element = React.createElement('h2', {\n//   className: 'title',\n//   style: {\n//     color: 'red'\n//   }\n// }, \"hello\", React.createElement('h3', null, \"word\"))\n\n// function Element() {\n//   return React.createElement('h2', {\n//     className: 'title',\n//     style: {\n//       color: 'red'\n//     }\n//   }, \"hello\", React.createElement('span', null, \"嘤嘤嘤\"))\n// }\n\nclass Counter extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = { name: '计算器', number: 0 }\n  }\n\n  componentWillMount() {\n    console.log('生产js对象')\n  }\n\n  componentDidMount() {\n    console.log('首次挂载')\n  }\n\n  _handleClick = () => {\n\n    // console.log('-1', this.state.number)\n\n    // this.setState({ number: this.state.number + 1 }, () => {\n    //   console.log('队列完成的回调', this.state.number)\n    // })\n    // console.log('0', this.state.number)\n    // // 因为传this.state给prevate时候this.state已经更新\n    // this.setState(prevate => ({ number: prevate.number + 1 }), () => {\n    //   console.log('队列完成的回调', this.state.number)\n    // })\n    // console.log('1', this.state.number)\n\n  }\n\n  _handleDivClick = () => {\n    console.log(this.refs)\n  }\n\n  _handleClickAdd = () => {\n    this.refs['c'].value = this.refs['a'].value + this.refs['b'].value\n  }\n\n  render() {\n    return React.createElement('div', {\n      className: 'title',\n      style: {\n        color: 'red'\n      },\n      onClick: this._handleDivClick\n    },\n      React.createElement('h1', null, this.state.name + this.state.number),\n      React.createElement('button', { onClick: this._handleClick }, \"+\"),\n      React.createElement('input', { ref: 'a' },),\n      React.createElement('input', { ref: 'b' },),\n      React.createElement('button', { onClick: this._handleClickAdd }, \"++\"),\n      React.createElement('input', { ref: 'c' },),\n    )\n\n    // return (\n    //   <div>\n    //     <h1>{this.state.name}{this.state.number}</h1>\n    //     <button onClick={this._handleClick}>+</button>\n    //   </div>\n    // )\n  }\n\n}\n\nlet element = React.createElement(Counter, {})\n\nReactDOM.render(\n  element,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","D:\\reactstudy\\my-app\\src\\reportWebVitals.js",[],{"ruleId":"23","severity":1,"message":"24","line":74,"column":1,"nodeType":"25","endLine":74,"endColumn":33},{"ruleId":"23","severity":1,"message":"24","line":148,"column":1,"nodeType":"25","endLine":148,"endColumn":26},{"ruleId":"26","severity":1,"message":"27","line":4,"column":8,"nodeType":"28","messageId":"29","endLine":4,"endColumn":11},"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'App' is defined but never used.","Identifier","unusedVar"]