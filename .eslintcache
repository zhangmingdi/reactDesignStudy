[{"D:\\reactstudy\\my-app\\src\\react.js":"1","D:\\reactstudy\\my-app\\src\\react-dom.js":"2","D:\\reactstudy\\my-app\\src\\index.js":"3","D:\\reactstudy\\my-app\\src\\reportWebVitals.js":"4"},{"size":1444,"mtime":1611154374887,"results":"5","hashOfConfig":"6"},{"size":4117,"mtime":1611284235603,"results":"7","hashOfConfig":"6"},{"size":1343,"mtime":1611282696861,"results":"8","hashOfConfig":"6"},{"size":362,"mtime":1609773026717,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"a4f8ff",{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\reactstudy\\my-app\\src\\react.js",["19"],"D:\\reactstudy\\my-app\\src\\react-dom.js",["20"],"\r\nexport function updateComponent(componentInstance) {\r\n  //拿出js描述的dom\r\n  const element = componentInstance.render()\r\n\r\n  let { type, props } = element\r\n\r\n  //创建真实dom\r\n  let dom = createDom(type, props, componentInstance)\r\n\r\n  //更换渲染之前真实dom\r\n  componentInstance.dom.parentNode.replaceChild(dom, componentInstance.dom)\r\n\r\n  //替换之前真实dom\r\n  componentInstance.dom = dom\r\n\r\n}\r\n\r\n/* \r\n合成事件\r\n在事件处理函数执行前要把批量更新模式设置为true,使更新js的dom加入到了任务队列\r\n等事件函数处理完成之后才会进行实际更新\r\n事件委托把所有事件监听都委托给document \r\n */\r\nfunction addEvent(dom, eventType, listener, componentInstance) {\r\n\r\n  eventType = eventType.toLocaleLowerCase()\r\n\r\n  let eventStore = dom.eventStore || (dom.eventStore = {})\r\n\r\n  eventStore[eventType] = { listener, componentInstance }\r\n\r\n}\r\n\r\ndocument.addEventListener('click', dispatchEvent, false)\r\n\r\nfunction dispatchEvent(e) {\r\n\r\n  let { type, target } = e\r\n\r\n  // 由于事件委托不能进行冒泡执行函数，所以只能循环模拟冒泡\r\n  while (target) {\r\n\r\n    let { eventStore } = target\r\n\r\n    if (eventStore) {\r\n      let { listener, componentInstance } = eventStore['on' + type]\r\n      if (listener) {\r\n        if (componentInstance) {\r\n          componentInstance._isBatchingUpdate = true\r\n        }\r\n        listener.call(null, e)\r\n        if (componentInstance) {\r\n          componentInstance._isBatchingUpdate = false\r\n          componentInstance.forceUpDate()\r\n        }\r\n      }\r\n    }\r\n    target = target.parentNode\r\n  }\r\n\r\n}\r\n\r\nfunction render(element, container, componentInstance) {\r\n\r\n  if (typeof element === 'string' || typeof element === 'number') {\r\n    return container.appendChild(document.createTextNode(element))\r\n  }\r\n\r\n  let { type, props } = element\r\n\r\n  const isComponent = type.isComponent\r\n\r\n  if (typeof type === 'function') {\r\n    componentInstance = isComponent ? new type(props) : null\r\n    element = isComponent ? componentInstance.render(props) : type(props)\r\n    if (isComponent && componentInstance) {\r\n\r\n      // 让组件props的ref指向该组件实例\r\n      if (props.ref) {\r\n        props.ref.current = componentInstance\r\n      }\r\n\r\n      // 生命周期的实现 当js描述的dom对象生产的时候\r\n      componentInstance.componentWillMount && componentInstance.componentWillMount()\r\n    }\r\n    type = element.type\r\n    props = element.props\r\n  }\r\n\r\n  let realDom = createDom(type, props, componentInstance)\r\n  // 创建好真实dom之后再赋值给实例对象\r\n  if (isComponent && componentInstance) {\r\n    componentInstance.dom = realDom\r\n  }\r\n\r\n  container.appendChild(realDom)\r\n  if (isComponent && componentInstance) {\r\n    componentInstance.componentDidMount && componentInstance.componentDidMount()\r\n\r\n  }\r\n}\r\n\r\n// 把js对象描述的Dom转变为真是浏览器的dom\r\nfunction createDom(type, props, componentInstance) {\r\n\r\n  const dom = document.createElement(type)\r\n\r\n  for (let propName in props) {\r\n    if (propName === 'childrens') {\r\n      props.childrens.forEach((item, index) => {\r\n        render(item, dom, componentInstance)\r\n      })\r\n    } else if (propName === 'className') {\r\n      dom.className = props[propName]\r\n    } else if (propName === 'style') {\r\n      let styObj = props[propName]\r\n      for (let vo in styObj) {\r\n        dom.style[vo] = styObj[vo]\r\n      }\r\n    } else if (propName.startsWith('on')) {\r\n      // dom[propName.toLocaleLowerCase()] = props[propName]\r\n      // 生成真实dom时进行事件回调函数处理\r\n      addEvent(dom, propName, props[propName], componentInstance)\r\n    }\r\n    else {\r\n      dom.setAttribute(propName, props[propName])\r\n    }\r\n\r\n\r\n  }\r\n\r\n  if (props.ref) {\r\n\r\n    const ref = props.ref\r\n\r\n    if (typeof ref === 'string') {\r\n      componentInstance.refs[ref] = dom\r\n    } else if (typeof ref === 'function') {\r\n      ref.call(componentInstance, dom)\r\n    } else if (typeof ref === 'object' && ref !== null) {\r\n      ref.current = dom\r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n  return dom\r\n\r\n}\r\n\r\nexport default { render }","D:\\reactstudy\\my-app\\src\\index.js",["21"],"D:\\reactstudy\\my-app\\src\\reportWebVitals.js",[],{"ruleId":"22","severity":1,"message":"23","line":78,"column":1,"nodeType":"24","endLine":78,"endColumn":44},{"ruleId":"22","severity":1,"message":"23","line":154,"column":1,"nodeType":"24","endLine":154,"endColumn":26},{"ruleId":"25","severity":1,"message":"26","line":4,"column":8,"nodeType":"27","messageId":"28","endLine":4,"endColumn":11},"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'App' is defined but never used.","Identifier","unusedVar"]